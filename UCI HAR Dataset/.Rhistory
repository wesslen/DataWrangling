install.packages("swirl")
library("swirl")
install.packages("swirl")
library("swirl")
install.packages("RCurl")
install.packages("swirl")
install.packages("RCurl")
install.packages("swirl")
library("swirl")
library(swirl)
library("RCurl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("swirl")
install.packages("testthat")
install.packages("swirl")
install.packages("testthat")
install.packages("swirl")
install.packages("testthat")
install.packages("RCurl")
library("RCurl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("swirl")
library("swirl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
swirl()
library("dplyr")
#Setting Working Directory
setwd("~/Documents/Classes/MOOCs/R Data Wrangling/data")
# One-time Unzip
filename = "UCI HAR Dataset.zip"
setwd("~/Documents/Classes/MOOCs/R Data Wrangling/data/UCI HAR Dataset")
Labels <- read.fwf(file="activity_labels.txt", widths=c(2, 20))
colnames(Labels) <- c("LabelType","LabelName")
Features <- read.fwf(file="features.txt", widths=c(2, 34))
Subject_Test <- read.fwf(file="test/subject_test.txt", widths=c(3), col.names = "Participant")
X_Test <- read.table("test/X_test.txt", col.names = Features$V2)
Y_Test <- read.fwf(file="test/y_test.txt", widths=c(2), col.names = "LabelType")
# Give Labels a Name
Y_Test <- merge(Y_Test,Labels, by.x = "LabelType", by.y = "LabelType")
dataTest = cbind(Subject_Test,Y_Test,X_Test)
rm(list = c("Subject_Test","Y_Test","X_Test"))
Subject_Train <- read.fwf(file="train/subject_train.txt", widths=c(3), col.names = "Participant")
X_Train <- read.table("train/X_train.txt", col.names = Features$V2)
Y_Train <- read.fwf(file="train/y_train.txt", widths=c(2), col.names = "LabelType")
# Give Labels a Name
Y_Train <- merge(Y_Train,Labels, by.x = "LabelType", by.y = "LabelType")
dataTrain = cbind(Subject_Train,Y_Train,X_Train)
rm(list = c("Subject_Train","Y_Train","X_Train"))
## Combine Test & Train
# Create Test/Train Flag -- Alternatively could have used "mutate()" function
dataTest$DataFlag <- apply(dataTest, 1, function(x) { DataFlag = "Test"} )
dataTrain$DataFlag <- apply(dataTrain, 1, function(x) { DataFlag = "Train"} )
# Row Bind: Merges the training and the test sets to create one data set.
dataSet = rbind(dataTest,dataTrain)
rm(list = c("dataTest","dataTrain"))
# dpylr manipulation: Extracts only the measurements on the mean and standard deviation for each measurement.
part1 <- select(dataSet,contains("mean"))
part2 <- select(dataSet,contains("std"))
otherVar <- select(dataSet, Participant, LabelName, LabelType, DataFlag)
dataSet <- cbind(otherVar,part1, part2)
rm(list = c("part1","part2","otherVar"))
summary(dataSet)
dput(dataSet)
clear
dput(dataSet, file = "DataSet.R")
head(dataSet,n=5)
summary(dataSet)
str(dataSet)
table(LabelName$dataSet)
table(dataSet$LabelName)
table(dataSet$DataFlag)
table(dataSet$DataFlag,dataSet$LabelName)
object.size(dataSet)
print(object.size(dataSet),units="Mb")
sumData <- dataSet %>% count(Participant,LabelName,DataFlag)
dim(sumData)
View(sumData)
newData <- dataSet %>% group_by(Participant,LabelName,DataFlag) %>% summarise_each(funs(mean))
View(newData)
as.numeric(LabelName)
as.numeric(dataSet$LabelName)
View(sumData)
part1 <- select(dataSet,matches("mean"))
part1 <- select(dataSet,contains("mean"))
part1 <- select(dataSet,contains("mean"),-contains("angle"))
part1 <- select(dataSet,contains("mean"))
part2 <- select(dataSet,contains("std"))                     #variable includes "std"
otherVar <- select(dataSet, Participant, LabelName, LabelType, DataFlag)
dataSet <- cbind(otherVar,part1, part2)
part1 <- select(dataSet,contains("mean"),-contains("angle")) #variable includes "mean" but not "angle"
otherVar <- select(dataSet, Participant, LabelName, LabelType, DataFlag)
dataSet <- cbind(otherVar,part1, part2)
View(sumData)
table(dataSet$Participant,dataSet$LabelName)
names(dataSet)
names <- names(dataSet)
install.packages("jpeg")
library(jpeg)
file <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
library(libcurl)
library(curl)
file <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
myurl <- "ttps://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
pic <- readJPEG(z)
file.remove(z)
myurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
myurl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(myurl,z,mode="wb")
pic <- readJPEG(z)
file.remove(z)
pic <- readJPEG(z, native = TRUE)
z <- tempfile()
download.file(myurl,z,mode="wb")
pic <- readJPEG(z, native = TRUE)
file.remove(z)
quantile(pic, probs=c(0.3,0.8))
myurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
z <- tempfile()
download.file(myurl,z,mode="wb")
myurl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(myurl,z,mode="wb")
file <- read.csv(z,header = TRUE, sep = ",")
file$agricultureLogical = ifelse(file$ACR > 10 && file$AGS == 6,TRUE,FALSE)
head(file$agricultureLogical)
which(file$agricultureLogical)
file$agricultureLogical = ifelse(file$ACR > 10 & file$AGS == 6,TRUE,FALSE)
head(file$agricultureLogical)
which(file$agricultureLogical)
file$agricultureLogical = ifelse(which(file$ACR > 10 & file$AGS == 6),TRUE,FALSE)
dffile <- data.table(file)
library(data.table)
dffile <- data.table(file)
dffile$agricultureLogical = ifelse(dffile$ACR > 10 & dffile$AGS == 6,TRUE,FALSE)
head(dffile$agricultureLogical)
dffile$agricultureLogical = ifelse(dffile$ACR == 3 & dffile$AGS == 6,TRUE,FALSE)
which(dffile$agricultureLogical)[1:3]
file.remove(z)
myurl <- ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
z <- tempfile()
download.file(myurl,z,mode="wb")
file <- read.csv(z, header = TRUE, sep = ",")
file.remove(z)
dffile <- data.table(file)
myurl <- ("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
z <- tempfile()
download.file(myurl,z,mode="wb")
file <- read.csv(z, header = TRUE, sep = ",")
file.remove(z)
dffile <- data.table(file)
maindata <- data.table(file)
myurl <- ("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
z <- tempfile()
download.file(myurl,z,mode="wb")
file <- read.csv(z, header = TRUE, sep = ",")
file.remove(z)
edudata <- data.table(file)
combined <- merge(maindata,eddata,by.x = X, by.y = CountryCode)
combined <- merge(maindata,edudata,by.x = X, by.y = CountryCode)
combined <- merge(maindata,edudata,by.x = maindata$X, by.y = edudata$CountryCode)
View(maindata)
myurl <- ("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
z <- tempfile()
download.file(myurl,z,mode="wb")
file <- read.csv(z, skip = 4, nrows = 215)
file.remove(z)
maindata <- data.table(file)
maindata <- maindata[X != ""]
maindata <- maindata[, list(X, X.1, X.3, X.4)]
setnames(maindata, c("X","X.1","X.3","X.4"), c("CountryCode", "rankingGDP", "Long.Name", "GDP"))
combined <- merge(maindata,edudata, all = TRUE, by = c("CountryCode"))
View(combined)
is.na(combined$rankingGDP)
sum(is.na(combined$rankingGDP))
sum(!is.na(combined$rankingGDP))
sum(!is.na(unique(combined$rankingGDP)))
summary(combined)
newData <- combined %>% group_by(Income.Group) %>% summarise(mean(rankingGDP))
View(newData)
combined[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y,
rankingGDP, gdp)][13]
combined[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y,
rankingGDP, GDP)][13]
combined[,mean(rankingGDP)]
combined[,mean(rankingGDP, na.rm = TRUE)]
newData <- combined %>% group_by(Income.Group) %>% summarise(mean(rankingGDP, na.rm = TRUE))
View(newData)
combined$quanGDP = cut(combined$rankingGDP, breaks = quantile(newData$rankingGDP))
quantile(newData$rankingGDP)
quantile(newData$rankingGDP, na.rm = TRUE)
breaks <- quantile(newData$rankingGDP, probs = seq(0,1,0.2), na.rm = TRUE)
breaks <- quantile(combined$rankingGDP, probs = seq(0,1,0.2), na.rm = TRUE)
combined$quanGDP = cut(combined$rankingGDP, breaks = breaks)
table(combined$Income.Group,combined$quanGDP)
